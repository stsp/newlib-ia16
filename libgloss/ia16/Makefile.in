#
#

DESTDIR =
VPATH = @srcdir@ @srcdir@/..
srcdir = @srcdir@
objdir = .
srcroot = $(srcdir)/../..
objroot = $(objdir)/../..
mkinstalldirs = $(SHELL) $(srcroot)/mkinstalldirs

prefix = @prefix@
exec_prefix = @exec_prefix@

host_alias = @host_alias@
target_alias = @target_alias@
target = @target@

bindir = @bindir@
libdir = @libdir@
tooldir = $(exec_prefix)/$(target_alias)

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@

# Multilib support variables.
# TOP is used instead of MULTI{BUILD,SRC}TOP.
MULTIDIRS =
MULTISUBDIR =

SHELL =	/bin/sh

CC = @CC@

AS = @AS@
AR = @AR@
LD = @LD@
NM = @NM@
RANLIB = @RANLIB@

# Yuk.
OBJCOPY = $(subst ranlib,objcopy,$(RANLIB))

ELKS_SYS_OBJS =	fork.o read.o write.o open.o close.o wait4.o link.o \
		unlink.o execve.o chdir.o mknod.o chmod.o chown.o brk.o \
		stat.o lseek.o getpid.o mount.o umount.o setuid.o getuid.o \
		fstat.o utime.o chroot.o vfork.o access.o sync.o kill.o \
		rename.o mkdir.o rmdir.o dup.o pipe.o dup2.o setgid.o \
		signal.o fcntl.o ioctl.o reboot.o lstat.o symlink.o \
		readlink.o umask.o settimeofday.o gettimeofday.o select.o \
		readdir.o fchown.o dlload.o setsid.o socket.o bind.o \
		listen.o accept.o connect.o knlvsn.o
ELKS_LIB_OBJS	= elks-abort.o elks-isatty.o elks-sbrk.o
ELKS_CFLAGS	= $(CFLAGS) -melks
ELKS_SCRIPTS	= elk-mt.ld elk-mts.ld elk-mtl.ld elk-mtsl.ld \
		  elk-ms.ld elk-mss.ld elk-msl.ld elk-mssl.ld
ELKS_BSP	= libelks.a
ELKS_CRT0	= elks-crt0.o

DOS_COMMON_OBJS = dos-chdir.o dos-close.o dos-cvt-file-time.o dos-dup.o \
		  dos-dup2.o dos-fstat.o dos-getcwd.o dos-gettimeofday.o \
		  dos-isatty.o dos-lseek.o dos-mkdir.o dos-open.o dos-read.o \
		  dos-rename.o dos-rmdir.o dos-sbrk.o dos-stat.o dos-times.o \
		  dos-unlink.o dos-usleep.o dos-write.o
PROTECTED_MODE_P = $(filter -mprotected-mode -mdpmiable -melks%, \
			    $(CC) $(CFLAGS) $(MULTILIB))
CMODEL_MEDIUM_P = $(filter -mcmodel=medium,$(CC) $(CFLAGS) $(MULTILIB))
CMODEL_NOT_MEDIUM_P = $(if $(CMODEL_MEDIUM_P),,!)
DOS_COMMON_OBJS += $(if $(PROTECTED_MODE_P), \
			dpm-hosted.o dpm-r-dos.o dpm-r-func.o dpm-abort.o)

DOS_TINY_OBJS	= $(DOS_COMMON_OBJS)
DOS_TINY_OBJS	+= $(if $(PROTECTED_MODE_P),dpm-mtds.o,dos-mtabort.o)
DOS_TINY_CFLAGS	= -mseparate-code-segment -g -Os
DOS_TINY_ASFLAGS =
DOS_TINY_SCRIPTS = dos-com.ld dos-mt.ld dos-mts.ld dos-mtl.ld dos-mtsl.ld
DOS_TINY_BSP	= libdos-t.a
DOS_TINY_CRT0	= dos-t-c0.o

DOS_SMALL_OBJS	= $(DOS_COMMON_OBJS)
DOS_SMALL_OBJS	+= $(if $(PROTECTED_MODE_P),dpm-mscs.o dpm-msds.o, \
			dos-msmmabort.o)
DOS_SMALL_CFLAGS = $(DOS_TINY_CFLAGS)
DOS_SMALL_ASFLAGS = $(DOS_TINY_ASFLAGS)
DOS_SMALL_SCRIPTS = dos-exe-small.ld dos-ms.ld dos-mss.ld dos-msl.ld \
		    dos-mssl.ld
DOS_SMALL_BSP	= libdos-s.a
DOS_SMALL_CRT0	= dos-s-c0.o

DOS_MEDIUM_OBJS	= $(DOS_COMMON_OBJS)
DOS_MEDIUM_OBJS	+= dos-msmmabort.o
DOS_MEDIUM_CFLAGS = -mcmodel=medium $(DOS_TINY_CFLAGS)
DOS_MEDIUM_ASFLAGS = -mcmodel=medium $(DOS_TINY_ASFLAGS)
DOS_MEDIUM_SCRIPTS = dos-mm.ld dos-mms.ld dos-mml.ld dos-mmsl.ld
DOS_MEDIUM_BSP	= libdos-m.a
DOS_MEDIUM_CRT0	= dos-m-c0.o

DPMIABLE_TINY_OBJS =
DPMIABLE_TINY_SCRIPTS = dpm-mt.ld dpm-mts.ld dpm-mtl.ld dpm-mtsl.ld
DPMIABLE_TINY_CRT0 = dpm-t-c0.o

DPMIABLE_SMALL_OBJS =
DPMIABLE_SMALL_SCRIPTS = dpm-ms.ld dpm-mss.ld dpm-msl.ld dpm-mssl.ld
DPMIABLE_SMALL_CRT0 = dpm-s-c0.o

# This is a hack to allow us to build Newlib's nano formatted I/O functions
# as a separate "board support package", so that we do not have to build the
# whole of Newlib twice over with --enable-newlib-nano-formatted-io and
# without...  -- tkchia 20190201
NANO_STDIO_OBJS = nano-vfprintf.o nano-vfprintf_i.o nano-vfprintf_float.o \
		  nano-vfscanf.o nano-vfscanf_i.o nano-vfscanf_float.o
NANO_STDIO_BSP	= libnstdio.a

# Another hack, to support a mechanism to detect whether we need floating-point
# printf (...) and/or scanf (...) support.  -- tkchia 20190407
IPRINTF_OBJS	= i-dprintf.o i-vdprintf.o i-sprintf.o i-fprintf.o i-printf.o \
		  i-snprintf.o i-asprintf.o i-asnprintf.o i-vprintf.o \
		  i-vfprintf.o i-vsprintf.o i-vsnprintf.o i-vasprintf.o \
		  i-vasnprintf.o i-dprintfr.o i-vdprintfr.o i-sprintfr.o \
		  i-fprintfr.o i-printfr.o i-snprintfr.o i-asprintfr.o \
		  i-asnprintf.o i-vprintfr.o i-vfprintfr.o i-vsprintfr.o \
		  i-vsnprintfr.o i-vasprintfr.o i-vasnprintfr.o
IPRINTF_BSP	= iprtf-fw.a
ISCANF_OBJS	= i-sscanf.o i-fscanf.o i-scanf.o i-vscanf.o i-vfscanf.o \
		  i-vsscanf.o i-sscanfr.o i-fscanfr.o i-scanfr.o i-vscanfr.o \
		  i-vfscanfr.o i-vsscanfr.o
ISCANF_BSP	= iscnf-fw.a
AUTOFLOAT_STDIO_SCRIPTS = libastdio.a libanstdio.a

ALL_SCRIPTS	= $(ELKS_SCRIPTS) $(DOS_TINY_SCRIPTS) $(DOS_SMALL_SCRIPTS) \
		  $(DOS_MEDIUM_SCRIPTS) $(DPMIABLE_TINY_SCRIPTS) \
		  $(DPMIABLE_SMALL_SCRIPTS) $(AUTOFLOAT_STDIO_SCRIPTS)
ALL_BSP		= $(ELKS_BSP) $(DOS_TINY_BSP) $(DOS_SMALL_BSP) \
		  $(DOS_MEDIUM_BSP) \
		  $(NANO_STDIO_BSP) $(IPRINTF_BSP) $(ISCANF_BSP)

OBJS		= $(if $(CMODEL_MEDIUM_P), \
		       $(DOS_MEDIUM_OBJS), \
		       $(sort $(DOS_TINY_OBJS) $(DOS_SMALL_OBJS)))
CFLAGS_FOR_TARGET += $(if $(CMODEL_MEDIUM_P), \
			  $(DOS_MEDIUM_CFLAGS), $(DOS_SMALL_CFLAGS))
ASFLAGS		= $(if $(CMODEL_MEDIUM_P), \
		       $(DOS_MEDIUM_ASFLAGS), $(DOS_SMALL_ASFLAGS))
SCRIPTS		= $(if $(CMODEL_MEDIUM_P), \
		       $(DOS_MEDIUM_SCRIPTS), \
		       $(sort $(DOS_TINY_SCRIPTS) $(DOS_SMALL_SCRIPTS)))
BSP		= $(if $(CMODEL_MEDIUM_P), \
		       $(DOS_MEDIUM_BSP), \
		       $(sort $(DOS_TINY_BSP) $(DOS_SMALL_BSP)))
CRT0		= $(if $(CMODEL_MEDIUM_P), \
		       $(DOS_MEDIUM_CRT0), \
		       $(sort $(DOS_TINY_CRT0) $(DOS_SMALL_CRT0)))

# Host specific makefile fragment comes in here.
@host_makefile_frag@

# Need to augment the definition from host_makefile_frag above.
INCLUDES += -I$(srcdir) -I. -I$(srcdir)/.. -I../libnosys

INSTALL_FILES = \
  $(BSP) $(CRT0) $(NANO_STDIO_BSP) $(IPRINTF_BSP) $(ISCANF_BSP) \
  $(SCRIPTS) $(AUTOFLOAT_STDIO_SCRIPTS)
INSTALL_FILES += $(if $(PROTECTED_MODE_P), \
		      $(if $(CMODEL_NOT_MEDIUM_P), \
			   $(DPMIABLE_TINY_CRT0) $(DPMIABLE_SMALL_CRT0) \
			   $(DPMIABLE_TINY_SCRIPTS) $(DPMIABLE_SMALL_SCRIPTS) \
			   $(ELKS_BSP) $(ELKS_CRT0) $(ELKS_SCRIPTS)))
#
# build a test program for each target board. Just trying to get
# it to link is a good test, so we ignore all the errors for now.
#
# all: ${MON_CRT0} ${MON_BSP}
all: $(INSTALL_FILES) libnosys.a
#
# Here's where we build the board support packages for each target.
#

# Magic from ../cris/Makefile.in follows:
# Toplevel build rules for various other libraries have gcc -B options
# applied so the newlib build directory is reached, but not the target
# libgloss directory (whose name is unknown to the toplevel configury
# anyway).  Configury tests that check for a successful link therefore
# fail; they can't find crt0.o and non-libc.a+libm.a libraries.  We copy
# over all files we would install to the neighboring newlib directory.
# Only the default crt0.o and libraries are needed, but we do them all for
# completeness.  They're however installed from here, not from the newlib
# build directory.
$(objroot)/newlib/%: %
	cp -p $^ $@

# This rule, being more specific, overrides the pattern rule above.
$(objroot)/newlib/$(DOS_TINY_BSP):
	ln -s ../libgloss/ia16/$(DOS_TINY_BSP) $(objroot)/newlib
$(objroot)/newlib/$(DOS_TINY_CRT0):
	ln -s ../libgloss/ia16/$(DOS_TINY_CRT0) $(objroot)/newlib
$(objroot)/newlib/$(DOS_SMALL_BSP):
	ln -s ../libgloss/ia16/$(DOS_SMALL_BSP) $(objroot)/newlib
$(objroot)/newlib/$(DOS_SMALL_CRT0):
	ln -s ../libgloss/ia16/$(DOS_SMALL_CRT0) $(objroot)/newlib
$(objroot)/newlib/$(DOS_MEDIUM_BSP):
	ln -s ../libgloss/ia16/$(DOS_MEDIUM_BSP) $(objroot)/newlib
$(objroot)/newlib/$(DOS_MEDIUM_CRT0):
	ln -s ../libgloss/ia16/$(DOS_MEDIUM_CRT0) $(objroot)/newlib
$(objroot)/newlib/$(DPMIABLE_TINY_CRT0):
	ln -s ../libgloss/ia16/$(DPMIABLE_TINY_CRT0) $(objroot)/newlib
$(objroot)/newlib/$(DPMIABLE_SMALL_CRT0):
	ln -s ../libgloss/ia16/$(DPMIABLE_SMALL_CRT0) $(objroot)/newlib
$(objroot)/newlib/$(ELKS_BSP):
	ln -s ../libgloss/ia16/$(ELKS_BSP) $(objroot)/newlib
$(objroot)/newlib/$(ELKS_CRT0):
	ln -s ../libgloss/ia16/$(ELKS_CRT0) $(objroot)/newlib
$(objroot)/newlib/$(NANO_STDIO_BSP):
	ln -s ../libgloss/ia16/$(NANO_STDIO_BSP) $(objroot)/newlib
$(objroot)/newlib/$(IPRINTF_BSP):
	ln -s ../libgloss/ia16/$(IPRINTF_BSP) $(objroot)/newlib
$(objroot)/newlib/$(ISCANF_BSP):
	ln -s ../libgloss/ia16/$(ISCANF_BSP) $(objroot)/newlib

#
# Here's where we build the test programs for each target.
#
.PHONY: test
test:	
	true

#
#
#
NEWLIB_CFLAGS = `if [ -d ${objroot}/newlib ]; then echo -I${objroot}/newlib/targ-include -I${srcroot}/newlib/libc/include; fi`
CFLAGS_FOR_TARGET += ${MULTILIB} ${INCLUDES} ${NEWLIB_CFLAGS}

.c.o:
	$(CC) $(CFLAGS_FOR_TARGET) -Os -c $(CFLAGS) -D_COMPILING_NEWLIB $<

nano-vfprintf.o: $(srcroot)/newlib/libc/stdio/nano-vfprintf.c
	$(CC) $(CFLAGS_FOR_TARGET) -Os -c $(CFLAGS) -D_COMPILING_NEWLIB $< \
	  -o $@
nano-vfprintf_i.o: $(srcroot)/newlib/libc/stdio/nano-vfprintf_i.c
	$(CC) $(CFLAGS_FOR_TARGET) -Os -c $(CFLAGS) -D_COMPILING_NEWLIB $< \
	  -o $@
nano-vfprintf_float.o: $(srcroot)/newlib/libc/stdio/nano-vfprintf_float.c
	$(CC) $(CFLAGS_FOR_TARGET) -Os -c $(CFLAGS) -D_COMPILING_NEWLIB $< \
	  -o $@
nano-vfscanf.o: $(srcroot)/newlib/libc/stdio/nano-vfscanf.c
	$(CC) $(CFLAGS_FOR_TARGET) -Os -c $(CFLAGS) -D_COMPILING_NEWLIB $< \
	  -o $@
nano-vfscanf_i.o: $(srcroot)/newlib/libc/stdio/nano-vfscanf_i.c
	$(CC) $(CFLAGS_FOR_TARGET) -Os -c $(CFLAGS) -D_COMPILING_NEWLIB $< \
	  -o $@
nano-vfscanf_float.o: $(srcroot)/newlib/libc/stdio/nano-vfscanf_float.c
	$(CC) $(CFLAGS_FOR_TARGET) -Os -c $(CFLAGS) -D_COMPILING_NEWLIB $< \
	  -o $@
elks-isatty.o: $(srcroot)/newlib/libc/posix/_isatty.c
	$(CC) $(CFLAGS_FOR_TARGET) -Os -c $(CFLAGS) -D_COMPILING_NEWLIB $< \
	  -o $@

$(ELKS_CRT0) : elks-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

$(ELKS_SYS_OBJS) : elks-syscalls.c elks-syscalls.h
	$(CC) $(CFLAGS_FOR_TARGET) $(ELKS_CFLAGS) -DLABEL=_$(subst .o,,$@) \
	-DFUNC=$(subst .o,,$@) -DSYSCALL=__SYSCALL_for_$(subst .o,,$@) \
	-DSYSCALL_$(subst .o,,$@) $< -c -o $@

$(ELKS_BSP) : $(ELKS_SYS_OBJS) $(ELKS_LIB_OBJS)
	$(AR) rcs $@ $+

$(DOS_TINY_CRT0) : dos-models-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) -DTINY -USMALL -UMEDIUM -UDPMIABLE \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

$(DOS_SMALL_CRT0) : dos-models-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) -UTINY -DSMALL -UMEDIUM -UDPMIABLE \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

$(DOS_MEDIUM_CRT0) : dos-models-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) -UTINY -USMALL -DMEDIUM -UDPMIABLE \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

$(DPMIABLE_TINY_CRT0) : dos-models-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) -DTINY -USMALL -DDPMIABLE \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

$(DPMIABLE_SMALL_CRT0) : dos-models-crt0.S
	$(CC) $(CFLAGS_FOR_TARGET) -UTINY -DSMALL -DDPMIABLE \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

dos-chdir.o: dos-chdir.S call-cvt.h pmode.h
dos-close.o: dos-close.S call-cvt.h
dos-getcwd.o: dos-getcwd.S call-cvt.h pmode.h
dos-isatty.o: dos-isatty.S call-cvt.h
dos-lseek.o: dos-lseek.S call-cvt.h
dos-mkdir.o: dos-mkdir.S call-cvt.h pmode.h
dos-read.o: dos-read.S call-cvt.h pmode.h
dos-rename.o: dos-rename.S call-cvt.h pmode.h
dos-rmdir.o: dos-rmdir.S call-cvt.h pmode.h
dos-unlink.o: dos-unlink.S call-cvt.h pmode.h
dos-write.o: dos-write.S call-cvt.h pmode.h

# (!) dos-times.S uses the division operator.
dos-times.o: override CFLAGS += -Wa,--divide
dos-times.o: dos-times.S call-cvt.h

libnosys.a:
	$(MAKE) -C ../libnosys/ libnosys.a
	rm -f $@
	ln -s ../libnosys/libnosys.a $@

$(DOS_TINY_BSP) : $(DOS_TINY_OBJS)
	$(AR) rcs $@ $+

$(DOS_SMALL_BSP) : $(DOS_SMALL_OBJS)
	$(AR) rcs $@ $+

$(DOS_MEDIUM_BSP) : $(DOS_MEDIUM_OBJS)
	$(AR) rcs $@ $+

# When building the nano I/O "BSP", we need to also extract the modules from
# libc.a that directly or indirectly use the nano I/O routines, and include
# them in our "BSP".  This is so that calling, say, psignal(, ) will invoke
# the nano fprintf (...) and not the default one.
#
# FIXME: This code makes a number of assumptions, e.g. that libc.a will be
# built when we reach here, and that the .o file names cannot clash with our
# BSP modules' names.  -- tkchia 20190201
$(NANO_STDIO_BSP): $(objroot)/newlib/libc/libc.a $(NANO_STDIO_OBJS)
	$(AR) rcs $@.1.tmp $(NANO_STDIO_OBJS)
	set -e; \
	a="$@.1.tmp"; \
	while [ -n "$$a" ]; do \
	  echo '/:$$/ { s/:$$//; h; d }' >$@.2.tmp; \
	  echo '/:$$/ { s/:$$//; h; d }' >$@.3.tmp; \
	  $(NM) "$$a" | \
	    sed -n -e '/ [TRDB] /! d' \
		   -e 's,.* \([TRDB]\) ,/ \1 ,' \
		   -e 's,$$,\$$/ { g; p; d },' \
		   -e p >>$@.2.tmp; \
	  $(NM) "$$a" | \
	    sed -n -e '/ [TRDB] /! d' \
		   -e 's,.* [TRDB] ,/ U ,' \
		   -e 's,$$,\$$/ { g; p; d },' \
		   -e p >>$@.3.tmp; \
	  $(NM) $< | sed -n -f $@.2.tmp | sort | uniq >$@.4.tmp; \
	  if $(NM) $< | sed -n -f $@.3.tmp | fgrep -v -w -f $@.4.tmp \
							   >$@.5.tmp; then \
	    sort $@.5.tmp | uniq >$@.6.tmp; \
	    xargs $(AR) x $< <$@.6.tmp; \
	    xargs $(AR) rs $@.1.tmp <$@.6.tmp; \
	    xargs rm -f <$@.6.tmp; \
	    a="$<"; \
	  else \
	    a=; \
	  fi; \
	done
	mv $@.1.tmp $@
	rm -f $@.2.tmp $@.3.tmp $@.4.tmp $@.5.tmp $@.6.tmp

$(IPRINTF_BSP): $(IPRINTF_OBJS)
	$(AR) rcs $@ $+

i-printf.o: i-stdio.S
	$(CC) $(CFLAGS_FOR_TARGET) -DH= -DT=printf \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

i-%printf.o: i-stdio.S
	$(CC) $(CFLAGS_FOR_TARGET) -DH=$* -DT=printf \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

i-printfr.o: i-stdio.S
	$(CC) $(CFLAGS_FOR_TARGET) -DH=_ -DT=printf_r \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

i-%printfr.o: i-stdio.S
	$(CC) $(CFLAGS_FOR_TARGET) -DH=_$* -DT=printf_r \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

$(ISCANF_BSP): $(ISCANF_OBJS)
	$(AR) rcs $@ $+

i-scanf.o: i-stdio.S
	$(CC) $(CFLAGS_FOR_TARGET) -DH= -DT=scanf \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

i-%scanf.o: i-stdio.S
	$(CC) $(CFLAGS_FOR_TARGET) -DH=$* -DT=scanf \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

i-scanfr.o: i-stdio.S
	$(CC) $(CFLAGS_FOR_TARGET) -DH=_ -DT=scanf_r \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

i-%scanfr.o: i-stdio.S
	$(CC) $(CFLAGS_FOR_TARGET) -DH=_$* -DT=scanf_r \
	  $(ASFLAGS_FOR_TARGET) $(ASFLAGS) -c $(CFLAGS) $< -o $@

.c.S:
	${CC} ${CFLAGS_FOR_TARGET} -c $<

GEN_LD_SCRIPT = \
  CC='$(CC)' CFLAGS='$(CFLAGS) $(CFLAGS_FOR_TARGET)' \
    multidir='$(DESTDIR)$(tooldir)/lib$(MULTISUBDIR)' $(SHELL) $<

# dos-com.ld and dos-exe-small.ld are "older" names for dos-mtsl.ld and
# dos-mssl.ld which I am keeping around for backward compatibility.  -- tkchia

dos-mt.ld: dos-mt.ld.in
	$(GEN_LD_SCRIPT) -nostdlib >$@

dos-mts.ld: dos-mt.ld.in
	$(GEN_LD_SCRIPT) -nodefaultlibs >$@

dos-mtl.ld: dos-mt.ld.in
	$(GEN_LD_SCRIPT) -nostartfiles >$@

dos-mtsl.ld dos-com.ld: dos-mt.ld.in
	$(GEN_LD_SCRIPT) >$@

dos-ms.ld: dos-mx.ld.in
	$(GEN_LD_SCRIPT) -nostdlib >$@

dos-mss.ld: dos-mx.ld.in
	$(GEN_LD_SCRIPT) -nodefaultlibs >$@

dos-msl.ld: dos-mx.ld.in
	$(GEN_LD_SCRIPT) -nostartfiles >$@

dos-mssl.ld dos-exe-small.ld: dos-mx.ld.in
	$(GEN_LD_SCRIPT) >$@

dos-mm.ld: dos-mx.ld.in
	$(GEN_LD_SCRIPT) -mcmodel=medium -nostdlib >$@

dos-mms.ld: dos-mx.ld.in
	$(GEN_LD_SCRIPT) -mcmodel=medium -nodefaultlibs >$@

dos-mml.ld: dos-mx.ld.in
	$(GEN_LD_SCRIPT) -mcmodel=medium -nostartfiles >$@

dos-mmsl.ld: dos-mx.ld.in
	$(GEN_LD_SCRIPT) -mcmodel=medium >$@

dpm-mt.ld: dos-mt.ld.in
	$(GEN_LD_SCRIPT) -mdpmiable -nostdlib >$@

dpm-mts.ld: dos-mt.ld.in
	$(GEN_LD_SCRIPT) -mdpmiable -nodefaultlibs >$@

dpm-mtl.ld: dos-mt.ld.in
	$(GEN_LD_SCRIPT) -mdpmiable -nostartfiles >$@

dpm-mtsl.ld: dos-mt.ld.in
	$(GEN_LD_SCRIPT) -mdpmiable >$@

dpm-ms.ld: dos-mx.ld.in
	$(GEN_LD_SCRIPT) -mdpmiable -nostdlib >$@

dpm-mss.ld: dos-mx.ld.in
	$(GEN_LD_SCRIPT) -mdpmiable -nodefaultlibs >$@

dpm-msl.ld: dos-mx.ld.in
	$(GEN_LD_SCRIPT) -mdpmiable -nostartfiles >$@

dpm-mssl.ld: dos-mx.ld.in
	$(GEN_LD_SCRIPT) -mdpmiable >$@

elk-mt.ld: elk-mt.ld.in
	$(GEN_LD_SCRIPT) -nostdlib >$@

elk-mts.ld: elk-mt.ld.in
	$(GEN_LD_SCRIPT) -nodefaultlibs >$@

elk-mtl.ld: elk-mt.ld.in
	$(GEN_LD_SCRIPT) -nostartfiles >$@

elk-mtsl.ld: elk-mt.ld.in
	$(GEN_LD_SCRIPT) >$@

elk-ms.ld: elk-ms.ld.in
	$(GEN_LD_SCRIPT) -nostdlib >$@

elk-mss.ld: elk-ms.ld.in
	$(GEN_LD_SCRIPT) -nodefaultlibs >$@

elk-msl.ld: elk-ms.ld.in
	$(GEN_LD_SCRIPT) -nostartfiles >$@

elk-mssl.ld: elk-ms.ld.in
	$(GEN_LD_SCRIPT) >$@

clean mostlyclean:
	rm -f a.out core *.i *.o *-test *.srec *.dis *.x *.hex dos-*.ld \
	  $(ALL_BSP)

distclean maintainer-clean realclean: clean
	rm -f Makefile config.status *~

.PHONY: install info install-info clean-info
install: 
	$(mkinstalldirs) $(DESTDIR)${tooldir}/lib${MULTISUBDIR}
	set -e; for x in ${INSTALL_FILES}; do\
	  if [ -f $$x ]; then \
	    ${INSTALL_DATA} $$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; \
	  else \
	    ${INSTALL_DATA} $(srcdir)/$$x $(DESTDIR)${tooldir}/lib${MULTISUBDIR}/$$x; \
	  fi; \
	done

doc:
info:
install-info:
clean-info:

Makefile: Makefile.in config.status @host_makefile_frag_path@
	$(SHELL) config.status

config.status: configure
	$(SHELL) config.status --recheck
